head	1.1;
access;
symbols;
locks
	sbosse:1.1; strict;
comment	@# @;


1.1
date	2020.02.03.09.45.01;	author sbosse;	state Exp;
branches;
next	;


desc
@@


1.1
log
@.
@
text
@/**
 **      ==============================
 **       O           O      O   OOOO
 **       O           O     O O  O   O
 **       O           O     O O  O   O
 **       OOOO   OOOO O     OOO  OOOO
 **       O   O       O    O   O O   O
 **       O   O       O    O   O O   O
 **       OOOO        OOOO O   O OOOO
 **      ==============================
 **      Dr. Stefan Bosse http://www.bsslab.de
 **
 **      COPYRIGHT: THIS SOFTWARE, EXECUTABLE AND SOURCE CODE IS OWNED
 **                 BY THE AUTHOR(S).
 **                 THIS SOURCE CODE MAY NOT BE COPIED, EXTRACTED,
 **                 MODIFIED, OR OTHERWISE USED IN A CONTEXT
 **                 OUTSIDE OF THE SOFTWARE SYSTEM.
 **
 **    $AUTHORS:     Stefan Bosse
 **    $INITIAL:     (C) 2006-2018 bLAB
 **    $CREATED:     09-02-16 by sbosse.
 **    $RCS:         $Id: chan.js,v 1.3 2017/05/27 18:20:36 sbosse Exp $
 **    $VERSION:     1.11.2
 **
 **    $INFO:
 **
 **  JAM Agent Management Port (AMP) over streams
 **
 **
 **
 **    $ENDOFINFO
 */
var Io = Require('com/io');
var Lz = Require('os/lz-string');
var Comp = Require('com/compat');
var Buf = Require('dos/buf');
var Net = Require('dos/network');
var Command = Net.Command;
var Status = Net.Status;
var current=none;
var Aios=none;
var CBL = Require('com/cbl');

var COM = Require('jam/ampCOM'),
    AMMode=COM.AMMode,
    AMMessageType=COM.AMMessageType,
    AMState=COM.AMState,
    amp=COM.amp,
    options=COM.options,
    url2addr=COM.url2addr,
    addr2url=COM.addr2url,
    addrequal=COM.addrequal,
    resolve=COM.resolve,
    ipequal=COM.ipequal,
    getNetworkIP=COM.getNetworkIP;

module.exports.current=function (module) { current=module.current; Aios=module; };

/** AMP port using streams
 *  ======================
 *
 *  Note: Process streams transfer objects not data!
 *  No negotiation is performed. Data transfer can be fragmented.
 * 
 * type amp.stream = function (options:{sock:stream,verbose?,logging?,out?:function,log?,mode?:'buffer'|'object'})
 */
amp.stream = function (options) {
  var self=this;
  options=checkOptions(options,{});
  this.options=options;
  this.verbose=checkOption(options.verbose,0);

  this.dir=options.dir;                                   // Logical direction

  this.mode = AMMode.AMO_UNICAST | 
              AMMode.AMO_STATIC |                         // No link change
              (options.mode=='object'? AMMode.AMO_OBJECT:AMMode.AMO_BUFFER);                   // Transfer data buffers or objects? 

  this.port = options.port||Net.uniqport();     // Connection Link Port (this side)
  this.id = Net.Print.port(this.port);
  
  this.links={state:AMState.AMS_NOTCONNECTED};
  
  // Stream socket; can be a process object!
  this.sock = options.sock;

  this.dlimit = options.dlimit||512;

  this.out = function (msg) {
    Aios.print('[AMP '+Net.Print.port(self.port)+
              (self.dir?(' '+Aios.DIR.print(self.dir)):'')+'] '+msg);
  }
  this.state = AMState.AMS_INIT;

  this.events = [];

  this.logs=[];
  this.logging=options.logging||false;
  if (this.logging) {
    setInterval(function () { self.LOG('print') },5000);
  }

  if (this.mode & AMMode.AMO_OBJECT) 
    this.receiver=this.receiverObj,
    this.request=this.requestObj;
};

amp.stream.prototype.LOG = amp.udp.prototype.LOG;  
amp.stream.prototype.emit = amp.udp.prototype.emit;
amp.stream.prototype.init = amp.udp.prototype.init;
amp.stream.prototype.on = amp.udp.prototype.on;

amp.stream.prototype.receiver=function (callback,rcv) {
  var self = this;

  if (rcv == undefined || rcv.address==undefined) rcv={},rcv.address=this.rcv.address;
  if (rcv.port==undefined) rcv,port=this.rcv.port;

  var cache = Comp.hashtbl.create();
  var buf = Buf.Buffer();
  var sock = this.sock; // rcv_sock;

  sock.on('message', function (message, remote) {
    var handler,dfrags,dlist,msgtyp,tid,ipport,discard,off,size,thisnum,transaction,more,port,ip,data,msg;
    handler={};

    Buf.buf_init(buf);
    Buf.buf_of_str(buf,message);
    self.count.rcv += message.length;

    if (message.length >= 12) {
      msgtyp=Buf.buf_get_int16(buf);
      discard=false;
      if (self.verbose>1)
        self.out('receiver: Receiving Message  [' + message.length+'] '+AMMessageType.print(msgtyp));

      switch (msgtyp) {

        case AMMessageType.AMMRPCHEAD:
          tid = Buf.buf_get_int16(buf);
          port = Buf.buf_get_port(buf);
          handler.tid=tid;
          handler.remote=remote.address+':'+Buf.buf_get_int16(buf);
          handler.cmd=Buf.buf_get_int16(buf);
          handler.size=Buf.buf_get_int16(buf);
          handler.frags=Buf.buf_get_int16(buf);
          handler.buf=Buf.Buffer();
          // console.log(handler)
          if (handler.size>0) {
            dlist = Comp.array.range(0, handler.frags - 1);
            // Add transaction to cache for pending data 
            Comp.hashtbl.add(cache, handler.tid, [handler,dlist,1000]); 
          } else {
            callback(handler);
          }
          break;

        case AMMessageType.AMMRPCDATA:
          tid = Buf.buf_get_int16(buf);
          port = Buf.buf_get_port(buf);
          off = Buf.buf_get_int32(buf);
          size = Buf.buf_get_int16(buf);
          more = Buf.buf_get_int16(buf);
          thisnum = off/self.dlimit;
          transaction = Comp.hashtbl.find(cache,tid);
          if (transaction!=undefined) {
            handler=transaction[0];
            if (self.verbose>1)
              self.out('receiver: adding data num='+
                       thisnum+' off='+off+' size='+size+' dlist='+transaction[1]);

            Buf.buf_get_buf(buf,handler.buf,off,size);
            transaction[1]=Comp.array.filter(transaction[1],function(num) {return (num!=thisnum)});
            if (Comp.array.empty(transaction[1])) {
                if (self.verbose>1) self.out('[AMP] receiver: finalize '+addr2url(remote));
                // Io.out(handler.data.toString());
                // Deliver
                callback(handler);
                Comp.hashtbl.remove(cache,tid);
            }
            handler=undefined;
          }
          break;
      }
    }
  });
};

// Object transfer mode (process streams)
// Message format: {cmd:*,msg:buffer}
amp.stream.prototype.receiverObj=function (callback,rcv) {
  this.sock.on('message', function (obj) {
    var handler={cmd:obj.cmd,buf:Buf.Buffer(obj.msg)};
    self.count.rcv += obj.msg.length;
    if (callback) callback(handler);
  });
}

amp.stream.prototype.request=amp.udp.prototype.request;

// Object transfer mode (process streams)
// function (cmd:integer,msg:{pos:number,data:buffer},callback:function)
amp.stream.prototype.requestObj=function (cmd,msg,callback) {
  // Sync. operation
  this.count.snd += msg.data.length;
  this.sock.send({cmd:cmd,msg:msg.data}); 
  if (callback) callback()
}
amp.stream.prototype.start = function(callback) { 
  if (this.verbose) this.out('Stream link '+Aios.DIR.print(this.dir)+' started.');
  this.links.state=AMState.AMS_CONNECTED;
  if (callback) callback()
};
amp.stream.prototype.stop = function(callback) { if (callback) callback()};
amp.stream.prototype.status=amp.udp.prototype.status;

@
