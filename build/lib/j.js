var s="function  (dir,radius,offset,group) {CP(); this.sensors; this.delta; this.radius=radius; this.group=group; this.offset=offset; this.dir=dir; this.backdir; this.childs=[]; this.goback=false; this.hop=0; this.parent; this.MAXHOP=5; this.verbose=1; this.enoughinput=0; this.inbound = function (nextdir) {CP(); switch (nextdir) { case DIR.NORTH: return (this.delta.y+this.offset.y) > -(this.radius); case DIR.SOUTH: return (this.delta.y+this.offset.y) < (this.radius); case DIR.WEST: return (this.delta.x+this.offset.x) > -(this.radius); case DIR.EAST: return (this.delta.x+this.offset.x) < (this.radius); } return false; }; this.on = { 'DELIVER': function  (v) {CP(); var sensors; if (this.verbose>0) log('Got signal DELIVER'); try_inp(0,['SENSORS',this.id,_],function (t){CP(); if (t) sensors=t[2]; else sensors=[]; this.sensors=concat(this.sensors,sensors); this.enoughinput--; if (this.verbose>0) log('Got SENSORS #'+sensors.length+', enoughinput='+this.enoughinput); }); }, error : function  (e,info) {CP(); log('Caught exception '+e+', '+info); log(e.stack); }, exit : function  () {CP(); log('Terminating.'); } }; this.trans = { init: function  () {CP(); return 'move'; }, move: function  () {CP(); return 'percept'; }, percept: function  () {CP(); return (this.goback||this.dir==DIR.ORIGIN||this.hop==this.MAXHOP)?'goback':'explore'; }, explore: function  () {CP(); if (this.enoughinput<1) return 'goback'; }, goback: function  () {CP(); return 'deliver'; }, deliver: function  () {CP(); return 'end'; }, }\n this.next='init'; }"

var o = eval('var f = '+s);
